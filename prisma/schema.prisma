// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id Int @id @default(autoincrement())
  nome String @db.VarChar(100)
  nome_usuario String @db.VarChar(25) @unique
  email String @db.VarChar(150) @unique
  senha String @db.VarChar(255)
  data_nascimento DateTime @db.Date()
  estado_conta EstadoConta @default(ativo)
  criado_em DateTime @default(now())
  nivel_acesso Permissoes[]
  post Post[]
  comentario Comentario[]
  historico_login HistoricoLogin[]
  
  @@map("usuarios")
}

model Post {
  id Int @id @default(autoincrement())
  titulo String? @db.VarChar(100)
  conteudo String? @db.MediumText()
  rascunho Boolean @default(false)
  exibir Boolean @default(true)
  data_publicacao DateTime @default(now())
  data_edicao DateTime? @default(now())
  editado_por String? @db.VarChar(100)
  autorId Int
  autor Usuario @relation(fields: [autorId], references: [id])
  categoria Categoria[]
  comentario Comentario[]

  @@map("posts")
}

model Categoria {
  id Int @id @default(autoincrement())
  nome String @db.VarChar(100)
  descricao String @db.VarChar(100)
  publicacao Post[]

  @@map("categorias")
}

model Comentario {
  id Int @id @default(autoincrement())
  conteudo String @db.Text()
  data_publicacao DateTime @default(now())
  data_edicao DateTime? @default(now())
  avaliacao Avaliacao[]
  autorId Int
  publicacaoId Int
  autor Usuario @relation(fields: [autorId], references: [id])
  publicacao Post @relation(fields: [publicacaoId], references: [id])

  @@map("comentarios")
}

model Avaliacao {
  id Int @id @default(autoincrement())
  notas Int
  comentarioId Int
  comentario Comentario @relation(fields: [comentarioId], references: [id])

  @@map("avaliacoes")
}

model Permissoes {
  id Int @id @default(autoincrement())
  nome String @db.VarChar(30)
  descricao String @db.TinyText()
  usuario Usuario[]

  @@map("permissoes")
}

model HistoricoLogin {
  id Int @id @default(autoincrement())
  ip String @db.VarChar(15)
  login String @db.VarChar(150)
  usuarioId Int?
  usuario Usuario? @relation(fields: [usuarioId], references: [id])
  sucesso Boolean
  erro String? @db.VarChar(255)
  data DateTime @default(now())

  @@map("historico_login")
}

enum EstadoConta {
  ativo
  inativo
  banido
  bloqueado
}